DELIMITER //

-- Trigger to update ticket total cost before inserting a new ticket
CREATE TRIGGER before_ticket_insert
BEFORE INSERT ON ticket
FOR EACH ROW
BEGIN
    SET NEW.ticket_total_cost = NEW.ticket_cost * NEW.ticket_quantity;
END;
//

-- Triggers for movie table
CREATE TRIGGER after_movie_insert
AFTER INSERT ON movie
FOR EACH ROW
BEGIN
    INSERT INTO movie_activities (operation_type, new_values)
    VALUES ('INSERT', CONCAT('movie_title=', NEW.movie_title, ', ',
                             'movie_description=', NEW.movie_description, ', ',
                             'movie_poster_url=', NEW.movie_poster_url, ', ',
                             'movie_rated=', NEW.movie_rated, ', ',
                             'movie_display=', NEW.movie_display, ', ',
                             'movie_length=', NEW.movie_length, ', ',
                             'movie_rating=', NEW.movie_rating, ', ',
                             'movie_screen=', NEW.movie_screen));
END;
//

CREATE TRIGGER after_movie_delete
AFTER DELETE ON movie
FOR EACH ROW
BEGIN
    INSERT INTO movie_activities (operation_type, old_values)
    VALUES ('DELETE', CONCAT('movie_title=', OLD.movie_title, ', ',
                             'movie_description=', OLD.movie_description, ', ',
                             'movie_poster_url=', OLD.movie_poster_url, ', ',
                             'movie_rated=', OLD.movie_rated, ', ',
                             'movie_display=', OLD.movie_display, ', ',
                             'movie_length=', OLD.movie_length, ', ',
                             'movie_rating=', OLD.movie_rating, ', ',
                             'movie_screen=', OLD.movie_screen));
END;
//

CREATE TRIGGER after_movie_update
AFTER UPDATE ON movie
FOR EACH ROW
BEGIN
    INSERT INTO movie_activities (operation_type, old_values, new_values)
    VALUES ('UPDATE', CONCAT('movie_title=', OLD.movie_title, ', ',
                             'movie_description=', OLD.movie_description, ', ',
                             'movie_poster_url=', OLD.movie_poster_url, ', ',
                             'movie_rated=', OLD.movie_rated, ', ',
                             'movie_display=', OLD.movie_display, ', ',
                             'movie_length=', OLD.movie_length, ', ',
                             'movie_rating=', OLD.movie_rating, ', ',
                             'movie_screen=', OLD.movie_screen), 
                      CONCAT('movie_title=', NEW.movie_title, ', ',
                             'movie_description=', NEW.movie_description, ', ',
                             'movie_poster_url=', NEW.movie_poster_url, ', ',
                             'movie_rated=', NEW.movie_rated, ', ',
                             'movie_display=', NEW.movie_display, ', ',
                             'movie_length=', NEW.movie_length, ', ',
                             'movie_rating=', NEW.movie_rating, ', ',
                             'movie_screen=', NEW.movie_screen));
END;
//

-- Triggers for customer table
CREATE TRIGGER after_customer_insert
AFTER INSERT ON customer
FOR EACH ROW
BEGIN
    INSERT INTO customer_activities (operation_type, new_values)
    VALUES ('INSERT', CONCAT('customer_name=', NEW.customer_name, ', ',
                             'customer_email=', NEW.customer_email, ', ',
                             'customer_phone_number=', NEW.customer_phone_number, ', ',
                             'customer_status=', NEW.customer_status));
END;
//

CREATE TRIGGER after_customer_delete
AFTER DELETE ON customer
FOR EACH ROW
BEGIN
    INSERT INTO customer_activities (operation_type, old_values)
    VALUES ('DELETE', CONCAT('customer_name=', OLD.customer_name, ', ',
                             'customer_email=', OLD.customer_email, ', ',
                             'customer_phone_number=', OLD.customer_phone_number, ', ',
                             'customer_status=', OLD.customer_status));
END;
//

CREATE TRIGGER after_customer_update
AFTER UPDATE ON customer
FOR EACH ROW
BEGIN
    INSERT INTO customer_activities (operation_type, old_values, new_values)
    VALUES ('UPDATE', CONCAT('customer_name=', OLD.customer_name, ', ',
                             'customer_email=', OLD.customer_email, ', ',
                             'customer_phone_number=', OLD.customer_phone_number, ', ',
                             'customer_status=', OLD.customer_status), 
                      CONCAT('customer_name=', NEW.customer_name, ', ',
                             'customer_email=', NEW.customer_email, ', ',
                             'customer_phone_number=', NEW.customer_phone_number, ', ',
                             'customer_status=', NEW.customer_status));
END;
//

-- Triggers for ticket table
CREATE TRIGGER after_ticket_insert
AFTER INSERT ON ticket
FOR EACH ROW
BEGIN
    INSERT INTO ticket_activities (operation_type, new_values)
    VALUES ('INSERT', CONCAT('id=', NEW.ticket_id, 
                             ', Cost=', NEW.ticket_cost, 
                             ', Quantity=', NEW.ticket_quantity, 
                             ', Total_Cost=', NEW.ticket_total_cost, 
                             ', Seats_Chosen=', NEW.ticket_seats_chosen, 
                             ', Time_Selected=', NEW.ticket_time_selected, 
                             ', movie_id=', NEW.movie_id, 
                             ', customer_id=', NEW.customer_id));
END;
//

CREATE TRIGGER after_ticket_delete
AFTER DELETE ON ticket
FOR EACH ROW
BEGIN
    INSERT INTO ticket_activities (operation_type, old_values)
    VALUES ('DELETE', CONCAT('id=', OLD.ticket_id, 
                             ', Cost=', OLD.ticket_cost, 
                             ', Quantity=', OLD.ticket_quantity, 
                             ', Total_Cost=', OLD.ticket_total_cost, 
                             ', Seats_Chosen=', OLD.ticket_seats_chosen, 
                             ', Time_Selected=', OLD.ticket_time_selected, 
                             ', movie_id=', OLD.movie_id, 
                             ', customer_id=', OLD.customer_id));
END;
//

CREATE TRIGGER after_ticket_update
AFTER UPDATE ON ticket
FOR EACH ROW
BEGIN
    INSERT INTO ticket_activities (operation_type, old_values, new_values)
    VALUES ('UPDATE', CONCAT('id=', OLD.ticket_id, 
                             ', Cost=', OLD.ticket_cost, 
                             ', Quantity=', OLD.ticket_quantity, 
                             ', Total_Cost=', OLD.ticket_total_cost, 
                             ', Seats_Chosen=', OLD.ticket_seats_chosen, 
                             ', Time_Selected=', OLD.ticket_time_selected, 
                             ', movie_id=', OLD.movie_id, 
                             ', customer_id=', OLD.customer_id), 
                      CONCAT('id=', NEW.ticket_id, 
                             ', Cost=', NEW.ticket_cost, 
                             ', Quantity=', NEW.ticket_quantity, 
                             ', Total_Cost=', NEW.ticket_total_cost, 
                             ', Seats_Chosen=', NEW.ticket_seats_chosen, 
                             ', Time_Selected=', NEW.ticket_time_selected, 
                             ', movie_id=', NEW.movie_id, 
                             ', customer_id=', NEW.customer_id));
END;
//

-- Triggers for showtimes table
CREATE TRIGGER after_showtimes_insert
AFTER INSERT ON showtimes
FOR EACH ROW
BEGIN
    INSERT INTO showtimes_activities (operation_type, new_values)
    VALUES ('INSERT', CONCAT('show_time=', NEW.show_time, ', ',
                             'movie_id=', NEW.movie_id));
END;
//

CREATE TRIGGER after_showtimes_delete
AFTER DELETE ON showtimes
FOR EACH ROW
BEGIN
    INSERT INTO showtimes_activities (operation_type, old_values)
    VALUES ('DELETE', CONCAT('show_time=', OLD.show_time, ', ',
                             'movie_id=', OLD.movie_id));
END;
//

CREATE TRIGGER after_showtimes_update
AFTER UPDATE ON showtimes
FOR EACH ROW
BEGIN
    INSERT INTO showtimes_activities (operation_type, old_values, new_values)
    VALUES ('UPDATE', CONCAT('show_time=', OLD.show_time, ', ',
                             'movie_id=', OLD.movie_id), 
                      CONCAT('show_time=', NEW.show_time, ', ',
                             'movie_id=', NEW.movie_id));
END;
//

-- Triggers for payment table
CREATE TRIGGER after_payment_insert
AFTER INSERT ON payment
FOR EACH ROW
BEGIN
    INSERT INTO payment_activities (operation_type, new_values)
    VALUES ('INSERT', CONCAT('payment_method=', NEW.payment_method, ', ',
                             'payment_status=', NEW.payment_status, ', ',
                             'ticket_id=', NEW.ticket_id, ', ',
                             'customer_id=', NEW.customer_id, ', ',
                             'payment_paid_time=', NEW.payment_paid_time));
END;
//

CREATE TRIGGER after_payment_delete
AFTER DELETE ON payment
FOR EACH ROW
BEGIN
    INSERT INTO payment_activities (operation_type, old_values)
    VALUES ('DELETE', CONCAT('payment_method=', OLD.payment_method, ', ',
                             'payment_status=', OLD.payment_status, ', ',
                             'ticket_id=', OLD.ticket_id, ', ',
                             'customer_id=', OLD.customer_id, ', ',
                             'payment_paid_time=', OLD.payment_paid_time));
END;
//

CREATE TRIGGER after_payment_update
AFTER UPDATE ON payment
FOR EACH ROW
BEGIN
    INSERT INTO payment_activities (operation_type, old_values, new_values)
    VALUES ('UPDATE', CONCAT('payment_method=', OLD.payment_method, ', ',
                             'payment_status=', OLD.payment_status, ', ',
                             'ticket_id=', OLD.ticket_id, ', ',
                             'customer_id=', OLD.customer_id, ', ',
                             'payment_paid_time=', OLD.payment_paid_time), 
                      CONCAT('payment_method=', NEW.payment_method, ', ',
                             'payment_status=', NEW.payment_status, ', ',
                             'ticket_id=', NEW.ticket_id, ', ',
                             'customer_id=', NEW.customer_id, ', ',
                             'payment_paid_time=', NEW.payment_paid_time));
END;
//

DELIMITER ;
